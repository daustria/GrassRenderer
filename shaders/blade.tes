#version 430 core

layout(quads, equal_spacing, ccw) in;

patch in vec4 tc_v1;
patch in vec4 tc_v2;
patch in vec3 tc_blade_dir;
patch in vec3 tc_blade_up;

out vec4 tes_position;
out vec3 tes_normal;
out vec2 tes_uv; // texture coordinates

uniform mat4 view;
uniform mat4 projection;

void main()
{
    // get patch coordinate
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    float omu = 1.0f - u;
    float omv = 1.0f - v;
    vec3 off = tc_blade_dir * tc_v2.w;
    vec3 off2 = off * 0.5f;

    // Control points of our Bezier curve
    vec3 p0 = gl_in[0].gl_Position.xyz - off2;
    vec3 p1 = tc_v1.xyz - off2;
    vec3 p2 = tc_v2.xyz - off2;

    // Calculations correspond to de casteljau's algorithm in
    // aligning a quad to a Bezier curve.

    vec3 h1 = p0 + v * (p1 - p0);
    vec3 h2 = p1 + v * (p2 - p1);
    vec3 i1 = h1 + v * (h2 - h1);
    vec3 i2 = i1 + off;

    vec3 bitangent = tc_blade_dir;
    vec3 tangent;

    vec3 h1h2 = h2 - h1;
    if (dot(h1h2, h1h2) < 1e-3) {
        tangent = tc_blade_up;
    } else {
        tangent = normalize(h1h2);
    }
    tes_uv = vec2(u, v);
    tes_normal = normalize(cross(tangent, bitangent));

    float shapeConstant = 2.0f;
    vec3 position = mix(i1, i2, u + ((-v * u) + (v * omu)) * 0.5f);
    shapeConstant = 3.0f;

    // output patch point position in clip space
    gl_Position = projection * view * vec4(position, 1.0f);
    tes_position = vec4(position, 1.5f * abs(sin(shapeConstant * tc_v1.w)));
}
