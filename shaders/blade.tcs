#version 430 core

layout(vertices = 1) out;

in vec4 vs_v1[];
in vec4 vs_v2[];
in vec3 vs_blade_dir[];
in vec3 vs_blade_up[];

patch out vec4 tc_v1;
patch out vec4 tc_v2;
patch out vec3 tc_blade_dir;
patch out vec3 tc_blade_up;

uniform vec3 cam_pos;

void main()
{
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

    tc_v1 = vs_v1[0];
    tc_v2 = vs_v2[0];
    tc_blade_dir = vs_blade_dir[0];
    tc_blade_up = vs_blade_up[0];

    const float d = distance(gl_in[0].gl_Position.xyz, cam_pos);
    const float min_level = 1.0f;
    const float max_level = 12.0f;
    const float tess_range = max_level - min_level;
    const float max_distance = 30.0f;
    const float min_distance = 1.0f;
    const float dist_range = max_distance - min_distance;

    const float level = min_level + tess_range * (1.0f - clamp((d - min_distance) / dist_range, 0.0f, 1.0f));

    gl_TessLevelInner[0] = 1.0f;
    gl_TessLevelInner[1] = level;
    gl_TessLevelOuter[0] = level;
    gl_TessLevelOuter[1] = 1.0f;
    gl_TessLevelOuter[2] = level;
    gl_TessLevelOuter[3] = 1.0f;
}
